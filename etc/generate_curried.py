#!/usr/bin/env python
import cytoolz
import toolz
import toolz.curried


autogen_header = """\
###############################################################################
# THIS FILE IS AUTOMATICALLY GENERATED                                        #
#                                                                             #
# Please make all edits in etc/generate_curried.py and re-run                 #
# cytoolz/tests/test_curried_toolzlike.py                                     #
###############################################################################
"""


init_template = '''\
"""
Alternate namespece for cytoolz such that all functions are curried

Currying provides implicit partial evaluation of all functions

Example:

    Get usually requires two arguments, an index and a collection
    >>> from cytoolz.curried import get
    >>> get(0, ('a', 'b'))
    'a'

    When we use it in higher order functions we often want to pass a partially
    evaluated form
    >>> data = [(1, 2), (11, 22), (111, 222)]
    >>> list(map(lambda seq: get(0, seq), data))
    [1, 11, 111]

    The curried version allows simple expression of partial evaluation
    >>> list(map(get(0), data))
    [1, 11, 111]

See Also:
    cytoolz.functoolz.curry
"""
from . import exceptions
from . import operator
import cytoolz


_curry_set = frozenset([
    {should_curry}
])


def _curry_namespace(ns):
    return dict(
        (name, cytoolz.curry(f) if f in _curry_set else f)
        for name, f in ns.items() if '__' not in name
    )


locals().update(cytoolz.merge(
    _curry_namespace(vars(cytoolz)),
    _curry_namespace(vars(exceptions)),
))

# Clean up the namespace.
del _curry_set
del _curry_namespace
del exceptions
del cytoolz
'''


def _curry_namespace(ns):
    ct = vars(cytoolz)
    return (
        'cytoolz.' + name + ','
        for name, f in sorted(ns.items()) if isinstance(f, toolz.curry) and name in ct
    )


def gen_init():
    return init_template.format(
        should_curry='\n    '.join(
            _curry_namespace(vars(toolz.curried)),
        ),
    )


def main(argv):
    if len(argv) != 1:
        raise ValueError('no arguments expected')

    print(autogen_header + gen_init())


if __name__ == '__main__':
    from sys import argv
    main(argv)
